{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"/Users/konradcheng/.cargo/registry/src/index.crates.io-6f17d22bba15001f/secp256kfun-0.9.1/src/macros.rs","byte_start":13086,"byte_end":13102,"line_start":363,"line_end":363,"column_start":48,"column_end":64,"is_primary":true,"text":[{"text":"        let hash = $nonce_gen.begin_derivation($secret.borrow())$(.add($public))+;","highlight_start":48,"highlight_end":64}],"label":"expected `&Scalar`, found `&[u8]`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/generate_polynomials.rs","byte_start":570,"byte_end":830,"line_start":18,"line_end":23,"column_start":24,"column_end":6,"is_primary":false,"text":[{"text":"    let mut poly_rng = derive_nonce_rng! {","highlight_start":24,"highlight_end":43},{"text":"        nonce_gen => Deterministic::<Sha256>::default().tag(b\"frost keygen\"),","highlight_start":1,"highlight_end":78},{"text":"        secret => secret_key.as_slice(),","highlight_start":1,"highlight_end":41},{"text":"        public => [session_id.as_str()], // example: quarry_frost_key_session_1","highlight_start":1,"highlight_end":80},{"text":"        seedable_rng => ChaCha20Rng","highlight_start":1,"highlight_end":36},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"derive_nonce_rng!","def_site_span":{"file_name":"/Users/konradcheng/.cargo/registry/src/index.crates.io-6f17d22bba15001f/secp256kfun-0.9.1/src/macros.rs","byte_start":12656,"byte_end":12685,"line_start":350,"line_end":350,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! derive_nonce_rng {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"/Users/konradcheng/.cargo/registry/src/index.crates.io-6f17d22bba15001f/secp256kfun-0.9.1/src/macros.rs","byte_start":13069,"byte_end":13085,"line_start":363,"line_end":363,"column_start":31,"column_end":47,"is_primary":false,"text":[{"text":"        let hash = $nonce_gen.begin_derivation($secret.borrow())$(.add($public))+;","highlight_start":31,"highlight_end":47}],"label":"arguments to this method are incorrect","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/generate_polynomials.rs","byte_start":570,"byte_end":830,"line_start":18,"line_end":23,"column_start":24,"column_end":6,"is_primary":false,"text":[{"text":"    let mut poly_rng = derive_nonce_rng! {","highlight_start":24,"highlight_end":43},{"text":"        nonce_gen => Deterministic::<Sha256>::default().tag(b\"frost keygen\"),","highlight_start":1,"highlight_end":78},{"text":"        secret => secret_key.as_slice(),","highlight_start":1,"highlight_end":41},{"text":"        public => [session_id.as_str()], // example: quarry_frost_key_session_1","highlight_start":1,"highlight_end":80},{"text":"        seedable_rng => ChaCha20Rng","highlight_start":1,"highlight_end":36},{"text":"    };","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"derive_nonce_rng!","def_site_span":{"file_name":"/Users/konradcheng/.cargo/registry/src/index.crates.io-6f17d22bba15001f/secp256kfun-0.9.1/src/macros.rs","byte_start":12656,"byte_end":12685,"line_start":350,"line_end":350,"column_start":1,"column_end":30,"is_primary":false,"text":[{"text":"macro_rules! derive_nonce_rng {","highlight_start":1,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"expected reference `&Scalar`\n   found reference `&[u8]`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"method defined here","code":null,"level":"note","spans":[{"file_name":"/Users/konradcheng/.cargo/registry/src/index.crates.io-6f17d22bba15001f/secp256kfun-0.9.1/src/nonce.rs","byte_start":6285,"byte_end":6301,"line_start":175,"line_end":175,"column_start":8,"column_end":24,"is_primary":true,"text":[{"text":"    fn begin_derivation(&self, secret: &Scalar) -> Self::Hash;","highlight_start":8,"highlight_end":24}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/generate_polynomials.rs:18:24\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    let mut poly_rng = derive_nonce_rng! {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m19\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nonce_gen => Deterministic::<Sha256>::default().tag(b\"frost keygen\"),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        secret => secret_key.as_slice(),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m21\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        public => [session_id.as_str()], // example: quarry_frost_key_session_1\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m22\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        seedable_rng => ChaCha20Rng\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m23\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    };\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|_____\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mexpected `&Scalar`, found `&[u8]`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9marguments to this method are incorrect\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected reference `\u001b[0m\u001b[0m\u001b[1m&Scalar\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m               found reference `\u001b[0m\u001b[0m\u001b[1m&[u8]\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: method defined here\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/konradcheng/.cargo/registry/src/index.crates.io-6f17d22bba15001f/secp256kfun-0.9.1/src/nonce.rs:175:8\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m175\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn begin_derivation(&self, secret: &Scalar) -> Self::Hash;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `derive_nonce_rng` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to previous error","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to previous error\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0308`.\u001b[0m\n"}
